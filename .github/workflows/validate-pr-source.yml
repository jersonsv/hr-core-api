name: Validate GitFlow PR Rules
on:
  pull_request:
    branches: [ main, develop ]  # Escuchar PRs hacia main Y develop
    types: [opened, synchronize, reopened]

jobs:
  validate-gitflow:
    runs-on: ubuntu-latest
    name: Validate GitFlow PR Rules
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Get Fresh PR Info
      id: fresh_pr
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Obtener informaci√≥n fresca del PR
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          console.log('=== FRESH PR INFO ===');
          console.log('PR Number:', pr.number);
          console.log('PR Title:', pr.title);
          console.log('Head Branch:', pr.head.ref);
          console.log('Base Branch:', pr.base.ref);
          console.log('PR State:', pr.state);
          console.log('PR URL:', pr.html_url);
          console.log('===================');
          
          return {
            head_ref: pr.head.ref,
            base_ref: pr.base.ref,
            pr_number: pr.number,
            pr_state: pr.state
          };
    
    - name: Debug Context
      run: |
        echo "=== GITHUB CONTEXT DEBUG ==="
        echo "github.base_ref: '${{ github.base_ref }}'"
        echo "github.head_ref: '${{ github.head_ref }}'"
        echo "github.event.pull_request.base.ref: '${{ github.event.pull_request.base.ref }}'"
        echo "github.event.pull_request.head.ref: '${{ github.event.pull_request.head.ref }}'"
        echo ""
        echo "=== FRESH API DATA ==="
        echo "API Head Branch: ${{ fromJSON(steps.fresh_pr.outputs.result).head_ref }}"
        echo "API Base Branch: ${{ fromJSON(steps.fresh_pr.outputs.result).base_ref }}"
        echo "=========================="
        
    - name: Validate GitFlow Rules
      run: |
        FRESH_BASE="${{ fromJSON(steps.fresh_pr.outputs.result).base_ref }}"
        FRESH_HEAD="${{ fromJSON(steps.fresh_pr.outputs.result).head_ref }}"
        
        echo "üéØ Validating GitFlow Rules"
        echo "Target Branch: $FRESH_BASE"
        echo "Source Branch: $FRESH_HEAD"
        echo ""
        
        # Funci√≥n para verificar si es una rama feature
        is_feature_branch() {
          local branch=$1
          if [[ $branch == feature/* ]] || [[ $branch =~ ^feature- ]]; then
            return 0  # true
          else
            return 1  # false
          fi
        }
        
        # REGLA 1: PRs hacia main solo pueden venir de develop
        if [ "$FRESH_BASE" = "main" ]; then
          echo "üìã REGLA: PRs hacia 'main' solo desde 'develop'"
          
          if [ "$FRESH_HEAD" != "develop" ]; then
            echo ""
            echo "‚ùå ERROR: Pull requests hacia 'main' solo pueden venir de 'develop'!"
            echo "‚ùå Fuente actual: $FRESH_HEAD"
            echo "‚ùå Fuente requerida: develop"
            echo ""
            echo "üîÑ Proceso GitFlow correcto:"
            echo "1. Cerrar este PR"
            echo "2. Crear: $FRESH_HEAD ‚Üí develop"
            echo "3. Despu√©s del merge a develop"
            echo "4. Crear: develop ‚Üí main"
            echo ""
            exit 1
          fi
          
          echo "‚úÖ SUCCESS: develop ‚Üí main es v√°lido!"
          echo "‚úÖ Sigue el patr√≥n GitFlow correcto"
          echo ""
        
        # REGLA 2: PRs hacia develop pueden venir de feature/* o hotfix/*
        elif [ "$FRESH_BASE" = "develop" ]; then
          echo "üìã REGLA: PRs hacia 'develop' desde feature/* o hotfix/*"
          
          # Verificar si viene de una rama v√°lida
          if is_feature_branch "$FRESH_HEAD" || [[ $FRESH_HEAD == hotfix/* ]] || [[ $FRESH_HEAD =~ ^hotfix- ]]; then
            echo "‚úÖ SUCCESS: $FRESH_HEAD ‚Üí develop es v√°lido!"
            echo "‚úÖ Fuente v√°lida para develop"
            echo ""
          else
            echo ""
            echo "‚ùå ERROR: Pull requests hacia 'develop' deben venir de ramas feature/* o hotfix/*"
            echo "‚ùå Fuente actual: $FRESH_HEAD"
            echo "‚ùå Fuentes v√°lidas: feature/*, hotfix/*"
            echo ""
            echo "üîÑ Proceso sugerido:"
            echo "1. Renombrar rama a: feature/$FRESH_HEAD"
            echo "2. O crear nueva rama feature desde $FRESH_HEAD"
            echo ""
            exit 1
          fi
        
        # REGLA 3: Otras ramas target (si las hay)
        else
          echo "üìã INFO: PR hacia rama '$FRESH_BASE'"
          echo "‚úÖ No hay restricciones GitFlow para esta rama"
          echo ""
        fi
        
        echo "üéâ Validaci√≥n GitFlow completada exitosamente!"
