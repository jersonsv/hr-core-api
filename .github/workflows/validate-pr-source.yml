name: Validate PR Source
on:
  pull_request:
    branches: [ main ]  # Solo PRs hacia main
    types: [opened, synchronize, reopened]

jobs:
  validate-source:
    runs-on: ubuntu-latest
    name: Validate PR comes from develop
    if: github.base_ref == 'main'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Get Fresh PR Info
      id: fresh_pr
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Obtener informaci√≥n fresca del PR
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          console.log('=== FRESH PR INFO ===');
          console.log('PR Number:', pr.number);
          console.log('PR Title:', pr.title);
          console.log('Head Branch:', pr.head.ref);
          console.log('Base Branch:', pr.base.ref);
          console.log('PR State:', pr.state);
          console.log('PR URL:', pr.html_url);
          console.log('===================');
          
          // Tambi√©n obtener info del repositorio
          const { data: repo } = await github.rest.repos.get({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          console.log('=== REPO INFO ===');
          console.log('Default Branch:', repo.default_branch);
          console.log('================');
          
          return {
            head_ref: pr.head.ref,
            base_ref: pr.base.ref,
            pr_number: pr.number,
            pr_state: pr.state,
            default_branch: repo.default_branch
          };
    
    - name: Force Debug All Context
      run: |
        echo "=== GITHUB CONTEXT DEBUG ==="
        echo "github.base_ref: '${{ github.base_ref }}'"
        echo "github.head_ref: '${{ github.head_ref }}'"
        echo "github.event.pull_request.base.ref: '${{ github.event.pull_request.base.ref }}'"
        echo "github.event.pull_request.head.ref: '${{ github.event.pull_request.head.ref }}'"
        echo "github.event.number: ${{ github.event.number }}"
        echo "github.event.action: ${{ github.event.action }}"
        echo ""
        echo "=== FRESH API DATA ==="
        echo "API Head Branch: ${{ fromJSON(steps.fresh_pr.outputs.result).head_ref }}"
        echo "API Base Branch: ${{ fromJSON(steps.fresh_pr.outputs.result).base_ref }}"
        echo "API PR Number: ${{ fromJSON(steps.fresh_pr.outputs.result).pr_number }}"
        echo "API PR State: ${{ fromJSON(steps.fresh_pr.outputs.result).pr_state }}"
        echo "Repo Default Branch: ${{ fromJSON(steps.fresh_pr.outputs.result).default_branch }}"
        echo "=========================="
        
    - name: Validate with Fresh Data
      run: |
        FRESH_BASE="${{ fromJSON(steps.fresh_pr.outputs.result).base_ref }}"
        FRESH_HEAD="${{ fromJSON(steps.fresh_pr.outputs.result).head_ref }}"
        
        echo "üéØ Using FRESH API data for validation"
        echo "Target Branch: $FRESH_BASE"
        echo "Source Branch: $FRESH_HEAD"
        
        # Si el PR NO va hacia main, salir exitosamente
        if [ "$FRESH_BASE" != "main" ]; then
          echo ""
          echo "‚úÖ SUCCESS: PR targets '$FRESH_BASE', not 'main'"
          echo "‚úÖ This validation only applies to PRs targeting 'main'"
          echo "‚úÖ Feature ‚Üí develop is correct GitFlow behavior"
          echo ""
          exit 0
        fi
        
        echo ""
        echo "üîç PR targets 'main' - validating source branch..."
        
        # Para PRs hacia main, validar que vengan de develop
        if [ "$FRESH_HEAD" != "develop" ]; then
          echo ""
          echo "‚ùå ERROR: Pull requests to main must come from develop only!"
          echo "‚ùå Current source: $FRESH_HEAD"
          echo "‚ùå Expected source: develop"
          echo ""
          echo "üîÑ GitFlow Process:"
          echo "1. Close this PR"
          echo "2. Create: $FRESH_HEAD ‚Üí develop"
          echo "3. After merge to develop"
          echo "4. Create: develop ‚Üí main"
          echo ""
          exit 1
        fi
        
        echo ""
        echo "‚úÖ SUCCESS: develop ‚Üí main is valid!"
        echo "‚úÖ This follows correct GitFlow pattern"
        echo "‚úÖ Ready for release deployment"
        echo ""
