name: Validate GitFlow PR Rules
on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  validate-gitflow:
    runs-on: ubuntu-latest
    name: Validate GitFlow PR Rules
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Validate Workflow Consistency
      run: |
        echo "üîç Validating workflow consistency..."
        
        # Verificar que el workflow no est√© en estado corrupto
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "Event: ${{ github.event_name }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          
          # Si no hay base_ref, algo est√° mal
          if [ -z "${{ github.base_ref }}" ]; then
            echo "‚ùå ERROR: github.base_ref est√° vac√≠o - workflow en estado corrupto"
            echo "üîß SOLUCI√ìN: Cierra este PR y cr√©alo nuevamente"
            exit 1
          fi
        fi
        
        echo "‚úÖ Workflow consistency OK"
      
    - name: Get Fresh PR Info
      id: fresh_pr
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          console.log('=== FRESH PR INFO ===');
          console.log('PR Number:', pr.number);
          console.log('PR Title:', pr.title);
          console.log('Head Branch:', pr.head.ref);
          console.log('Base Branch:', pr.base.ref);
          console.log('PR State:', pr.state);
          console.log('===================');
          
          return {
            head_ref: pr.head.ref,
            base_ref: pr.base.ref,
            pr_number: pr.number,
            pr_state: pr.state
          };
    
    - name: Debug All Sources
      run: |
        echo "=== COMPARISON DEBUG ==="
        echo "GitHub context base: '${{ github.base_ref }}'"
        echo "GitHub context head: '${{ github.head_ref }}'"
        echo "Event base: '${{ github.event.pull_request.base.ref }}'"
        echo "Event head: '${{ github.event.pull_request.head.ref }}'"
        echo "API base: '${{ fromJSON(steps.fresh_pr.outputs.result).base_ref }}'"
        echo "API head: '${{ fromJSON(steps.fresh_pr.outputs.result).head_ref }}'"
        
        # Verificar consistencia entre fuentes
        GITHUB_BASE="${{ github.base_ref }}"
        EVENT_BASE="${{ github.event.pull_request.base.ref }}"
        API_BASE="${{ fromJSON(steps.fresh_pr.outputs.result).base_ref }}"
        
        if [ "$GITHUB_BASE" != "$EVENT_BASE" ] || [ "$GITHUB_BASE" != "$API_BASE" ]; then
          echo ""
          echo "‚ö†Ô∏è  WARNING: Inconsistencia detectada entre fuentes de datos"
          echo "‚ö†Ô∏è  Esto puede indicar workflow en estado corrupto"
          echo "‚ö†Ô∏è  Usando datos de API como fuente de verdad"
          echo ""
        fi
        echo "========================"
        
    - name: Validate GitFlow Rules
      run: |
        # Usar API como fuente de verdad (m√°s confiable)
        FRESH_BASE="${{ fromJSON(steps.fresh_pr.outputs.result).base_ref }}"
        FRESH_HEAD="${{ fromJSON(steps.fresh_pr.outputs.result).head_ref }}"
        
        echo "üéØ Validating GitFlow Rules"
        echo "Target Branch: $FRESH_BASE"
        echo "Source Branch: $FRESH_HEAD"
        echo ""
        
        # Validaci√≥n b√°sica de datos
        if [ -z "$FRESH_BASE" ] || [ -z "$FRESH_HEAD" ]; then
          echo "‚ùå ERROR: No se pudieron obtener datos del PR"
          echo "‚ùå Base: '$FRESH_BASE', Head: '$FRESH_HEAD'"
          echo "üîß Posible soluci√≥n: Re-crear el PR"
          exit 1
        fi
        
        # Funci√≥n para verificar si es una rama feature
        is_feature_branch() {
          local branch=$1
          case $branch in
            feature/*|feature-*) return 0 ;;
            *) return 1 ;;
          esac
        }
        
        is_hotfix_branch() {
          local branch=$1
          case $branch in
            hotfix/*|hotfix-*) return 0 ;;
            *) return 1 ;;
          esac
        }
        
        # REGLA 1: PRs hacia main solo pueden venir de develop
        if [ "$FRESH_BASE" = "main" ]; then
          echo "üìã REGLA: PRs hacia 'main' solo desde 'develop'"
          
          if [ "$FRESH_HEAD" != "develop" ]; then
            echo ""
            echo "‚ùå BLOQUEADO: Pull requests hacia 'main' solo pueden venir de 'develop'"
            echo "‚ùå Rama origen actual: $FRESH_HEAD"
            echo "‚ùå Rama origen requerida: develop"
            echo ""
            echo "üîÑ Proceso GitFlow correcto:"
            echo "1. Cerrar este PR"
            echo "2. Crear: $FRESH_HEAD ‚Üí develop"  
            echo "3. Hacer merge a develop"
            echo "4. Crear: develop ‚Üí main"
            echo ""
            exit 1
          fi
          
          echo "‚úÖ APROBADO: develop ‚Üí main es v√°lido"
          echo "‚úÖ Sigue el patr√≥n GitFlow correcto"
          
        # REGLA 2: PRs hacia develop desde feature/* o hotfix/*
        elif [ "$FRESH_BASE" = "develop" ]; then
          echo "üìã REGLA: PRs hacia 'develop' desde feature/* o hotfix/*"
          
          if is_feature_branch "$FRESH_HEAD" || is_hotfix_branch "$FRESH_HEAD"; then
            echo "‚úÖ APROBADO: $FRESH_HEAD ‚Üí develop es v√°lido"
            echo "‚úÖ Tipo de rama permitido para develop"
          else
            echo ""
            echo "‚ùå BLOQUEADO: PRs hacia 'develop' deben venir de ramas feature/* o hotfix/*"
            echo "‚ùå Rama origen actual: $FRESH_HEAD"
            echo "‚ùå Tipos v√°lidos: feature/*, hotfix/*"
            echo ""
            echo "üîß Soluciones:"
            echo "1. Renombrar rama a: feature/$FRESH_HEAD"
            echo "2. Crear nueva rama feature/ desde $FRESH_HEAD"
            echo ""
            exit 1
          fi
        
        # REGLA 3: Otras ramas (sin restricciones por ahora)
        else
          echo "üìã INFO: PR hacia rama '$FRESH_BASE'"
          echo "‚úÖ Sin restricciones GitFlow espec√≠ficas"
        fi
        
        echo ""
        echo "üéâ ‚úÖ VALIDACI√ìN GITFLOW EXITOSA ‚úÖ"
        echo "üéâ PR cumple con las reglas establecidas"